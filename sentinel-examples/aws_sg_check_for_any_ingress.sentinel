import "tfconfig"
import "strings"

# Used to collect all security groups from all modules into a map
get_all_security_groups = func() {
  all_security_groups = {}
  
  for tfconfig.module_paths as path {
    for tfconfig.module(path).resources.aws_security_group else [] as sg_name, sg_config {
      all_security_groups[sg_name] = sg_config
    }
  }
  
  print("[DEBUG] Printing SG map")
  print(all_security_groups)
  
  return all_security_groups
}

# Used to collect all security group rules from all modules into a map
get_all_security_group_rules = func() {
  all_security_group_rules = {}
  
  for tfconfig.module_paths as path {
    for tfconfig.module(path).resources.aws_security_group_rule else [] as sg_rule_name, sg_rule_config {
      all_security_group_rules[sg_rule_name] = sg_rule_config
    }
  }
  
  print("[DEBUG] Printing SG rule map")
  print(all_security_group_rules)
  
  return all_security_group_rules
}

# Grab the name part from a full resource string
# e.g. "${aws_security_group.sg_demo.id}" => "sg_demo"
get_name = func(full_resource_string) {
  # splitting by periods and grabbing second element from list
  sg_name = strings.split(full_resource_string, ".")[1]

  return sg_name
}

# Leaving the old function-style check here for DEBUG messages
check_sg_not_allow_ingress_to_private_from_any = func() {
  for security_group_rules as sg_rule_name, sg_rule_config {

    print("[DEBUG] SG rule attachment: ", sg_rule_config.config.security_group_id)
    sg_name = get_name(sg_rule_config.config.security_group_id)
      
    print("[DEBUG] SG Rule: ", sg_rule_name, " => SG: ", sg_name)
    print("[DEBUG] SG Rule CIDR: ", sg_rule_config.config.cidr_blocks, " type: ", sg_rule_config.config.type)
    
    print("[DEBUG] SG tags: ", security_groups[sg_name].config.tags)
    print("[DEBUG] SG NetworkLocation tag: ", security_groups[sg_name].config.tags[0].NetworkLocation)
    
    #if security_groups[sg_name].config.tags[0].NetworkLocation is "private" and
    #  sg_rule_config.config.type is "ingress" and
    #  sg_rule_config.config.cidr_blocks contains "0.0.0.0/0" {
    #    return false
    #}
  }
  
  return true
}

# Collect our resources
security_groups = get_all_security_groups()
security_group_rules = get_all_security_group_rules()

# Check for rules allowing ingress from "0.0.0.0/0" in security groups tagged "private"
# This is a more "idiomatic" way to do a check in Sentinel
check_sg_not_allow_ingress_from_any = rule {
  not any security_group_rules as sg_rule_name, sg_rule_config {
    sg_rule_config.config.type is "ingress" and
    sg_rule_config.config.cidr_blocks contains "0.0.0.0/0" and
    security_groups[get_name(sg_rule_config.config.security_group_id)].config.tags[0].NetworkLocation is "private"
  }
}

main = rule {
  check_sg_not_allow_ingress_to_private_from_any() and # For DEBUG
  
  check_sg_not_allow_ingress_from_any
}